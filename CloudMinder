#!/usr/bin/env node

require('dotenv').config()
require('array-flat-polyfill');
require ('es7-object-polyfill');
const os = require('os');
const { spawn } = require('child_process');
const fetch = require('node-fetch');
const express = require('express');
const app = express();

app.listen(2112, () => {
});

function getState(loadpercent, uptime) {
  let state = "RUNNING";
  const uptimeHours = uptime / 3600;
  if (uptimeHours >= 1.0 && loadpercent < 1.0) { state = "IDLE" }
  if (uptimeHours >= 8.0) { state = "LONG_RUNNING" }
  return state;
}

function getStatus() {
  const averages = os.loadavg();
  const cpus = os.cpus();
  const totalmem = os.totalmem();
  const freemem = os.freemem();
  const freemempercent = freemem / totalmem * 100.0;
  const loadpercent = (averages[0] / cpus.length) * 100.0;
  const interfaces = os.networkInterfaces();
  const interface = Object.values(interfaces).flat().find(interface => !interface.internal && interface.family === 'IPv4');
  const uptime = os.uptime();
  return {
    hostname: os.hostname(),
    load: averages[0],
    loadpercent: loadpercent,
    cpus: cpus.length,
    uptime: uptime,
    totalmem: totalmem,
    freemem: freemem,
    freemempercent: freemempercent,
    interfaces: interfaces,
    interface: interface,
    state: getState(loadpercent, uptime)
  };
}

app.get("/status", (request, response, next) => {
  response.json(getStatus());
});

app.post("/poweroff", (request, response, next) => {
  const process = spawn('sudo', ['poweroff']);
  process.stderr.on('data', data => {
    response.json({error: data});
  });
});

setInterval(() => {
  fetch(`${process.env.CENTRAL_URL}/ping`, {method: 'POST', body: JSON.stringify(getStatus()), headers: {'Content-Type': 'application/json'}})
    .then(it => it.json())
    .then(data => {
      // anything to do with the response?
    })
    .catch(error => {});
}, 10000);
